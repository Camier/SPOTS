name: Map Validation

on:
  push:
    paths:
      - 'src/frontend/**'
      - 'tests/map-validation/**'
  pull_request:
    paths:
      - 'src/frontend/**'
  workflow_dispatch:

jobs:
  validate-maps:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start Backend Server
      run: |
        cd src/backend
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        uvicorn main:app --reload --host 0.0.0.0 --port 8000 &
        sleep 5
    
    - name: Start Frontend Server
      run: |
        python -m http.server 8085 -d src/frontend &
        sleep 3
    
    - name: Run Map Validation Tests
      run: |
        cd tests/map-validation
        node run-validation.js --headless --screenshots
    
    - name: Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: map-screenshots
        path: tests/map-validation/screenshots/
        retention-days: 7
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const reportPath = path.join('tests', 'map-validation', 'validation-report.json');
          
          let report;
          try {
            const results = fs.readFileSync(reportPath, 'utf8');
            report = JSON.parse(results);
          } catch (error) {
            console.error('Failed to read validation report:', error);
            return;
          }
          
          const percentage = Math.round((report.summary.passed / report.summary.total) * 100);
          const status = report.summary.passed === report.summary.total ? '✅ All tests passed!' : 
                        `⚠️ ${report.summary.failed} test(s) failed`;
          
          let details = '';
          if (report.scenarios) {
            Object.entries(report.scenarios).forEach(([key, scenario]) => {
              const emoji = scenario.passed ? '✅' : '❌';
              details += `\n#### ${emoji} ${scenario.scenario}`;
              if (scenario.tests) {
                scenario.tests.forEach(test => {
                  details += `\n- ${test.passed ? '✅' : '❌'} ${test.name}: ${test.message}`;
                });
              }
              if (scenario.error) {
                details += `\n- ❌ Error: ${scenario.error}`;
              }
            });
          }
          
          const comment = `## 🗺️ Map Validation Results
          
          ${status}
          
          **Coverage:** ${percentage}% (${report.summary.passed}/${report.summary.total} tests)
          
          ### Test Scenarios:
          ${details}
          
          ---
          📸 [View Screenshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ⏱️ Run time: ${new Date(report.timestamp).toLocaleString()}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });